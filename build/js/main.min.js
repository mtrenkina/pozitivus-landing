"use strict";

const mobileWidth = window.matchMedia("(max-width: 767px)"),
  slickTestimonials = () => {
    $(document).ready(function () {
      $(".slider-list").slick({
        centerMode: !0,
        centerPadding: "310px",
        dots: !0,
        variableWidth: !0,
        prevArrow: $(".slider-controls__button--prev"),
        nextArrow: $(".slider-controls__button--next"),
        appendDots: $(".slider-controls__wrapper"),
        responsive: [{
          breakpoint: 1440,
          settings: {
            centerMode: !0,
            centerPadding: "310px",
            slidesToShow: 3
          }
        }, {
          breakpoint: 1439,
          settings: {
            centerMode: !0,
            centerPadding: "0px",
            slidesToShow: 1
          }
        }]
      });
    });
  },
  slickCases = () => {
    $(document).ready(function () {
      $(".cases-list").slick({
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: !0,
        autoplaySpeed: 3e3,
        arrows: !1,
        variableWidth: !0
      });
    });
  };
$(window).on("load resize", function () {
  $(window).width() < 1440 ? $(".cases-list:not(.slick-initialized)").slick({
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: !0,
    autoplaySpeed: 3e3,
    arrows: !1,
    variableWidth: !0
  }) : $(".cases-list.slick-initialized").slick("unslick");
}), slickTestimonials(), mobileWidth.matches && slickCases();
const navMain = document.querySelector(".main-nav"),
  navToggle = document.querySelector(".main-nav__toogle");
navMain.classList.remove("main-nav--nojs"), navToggle.addEventListener("click", function () {
  navMain.classList.contains("main-nav--closed") ? (navMain.classList.remove("main-nav--closed"), navMain.classList.add("main-nav--opened")) : (navMain.classList.add("main-nav--closed"), navMain.classList.remove("main-nav--opened"));
});
const block = Array.from(document.querySelectorAll(".animated-image-js")),
  observer = new IntersectionObserver(onIntersection, {
    root: null,
    threshold: .5
  });
function onIntersection(e) {
  e.forEach(e => {
    e.isIntersecting && (e.target.style.opacity = 1, e.target.classList.add("on-scroll-animation"), observer.unobserve(e.target));
  });
}
block.forEach(e => observer.observe(e));
const team = document.querySelector(".team"),
  teamList = team.querySelector(".team__list"),
  teamListButton = team.querySelector(".team__button");
teamListButton.addEventListener("click", () => {
  teamList.classList.remove("team-list--collapsed"), teamListButton.classList.add("team__button--clicked");
});
const slider = document.querySelector(".slider-controls"),
  buttonPrev = slider.querySelector(".slider-controls__button--prev"),
  buttonNext = slider.querySelector(".slider-controls__button--next"),
  blockedCheck = e => e.classList.contains("slider-controls__button--blocked"),
  checkButtonsDisability = () => {
    const e = slider.querySelector(".slick-dots").querySelectorAll("li"),
      t = slider.querySelector("li.slick-active");
    switch ([...e].indexOf(t)) {
      case [...e].length - 1:
        blockedCheck(buttonPrev) && buttonPrev.classList.remove("slider-controls__button--blocked"), buttonNext.classList.add("slider-controls__button--blocked");
        break;
      case 0:
        blockedCheck(buttonNext) && buttonNext.classList.remove("slider-controls__button--blocked"), buttonPrev.classList.add("slider-controls__button--blocked");
        break;
      case -1:
        checkButtonsDisability();
        break;
      default:
        blockedCheck(buttonPrev) && buttonPrev.classList.remove("slider-controls__button--blocked"), blockedCheck(buttonNext) && buttonNext.classList.remove("slider-controls__button--blocked");
    }
  };
document.addEventListener("DOMContentLoaded", () => {
  slider.onclick = e => {
    "BUTTON" === e.target.tagName && checkButtonsDisability();
  };
});
const processList = document.querySelector(".process-list"),
  listElements = processList.querySelectorAll(".process-list__item"),
  changeClass = e => {
    e.classList.contains("process-list__item--opened") ? (e.classList.remove("process-list__item--opened"), e.querySelector(".process-list__button").classList.remove(".process-list__button--opened")) : (e.classList.add("process-list__item--opened"), e.querySelector(".process-list__button").classList.add(".process-list__button--opened"));
  };
processList.onclick = e => {
  let t = e.target;
  "BUTTON" === t.tagName && changeClass(t.parentNode.parentElement);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
